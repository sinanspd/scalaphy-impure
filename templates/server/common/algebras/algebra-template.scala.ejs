package <%= orgName %>.<%= name %>Core.algebras

import cats._
import cats.implicits._ 
import cats.effect.Sync
import doobie.util.transactor.Transactor
import doobie._
import doobie.implicits._
import doobie.postgres._
import doobie.postgres.implicits._
import java.util.UUID

import <%= orgName %>.<%= name %>Core.schema.<%= schemaName %>._
import <%= orgName %>.<%= name %>Core.schema.<%= schemaName %>.{<%= schemaName %> => T<%= schemaName %>}
import <%= orgName %>.<%= name %>Core.effects.GenUUID
import <%= orgName %>.<%= name %>Core.effects.effects._
import <%= orgName %>.<%= name %>Core.db._
import <%= orgName %>.<%= name %>.schema.<%= schemaName %>

trait <%=algebraName%>[F[_]]{
    def get<%= algebraName %>s(): F[List[T<%= schemaName %>]]
    def get<%= algebraName %>ById(id: UUID): F[T<%= schemaName %>]
    def create<%= algebraName %>(
        <% for(var i = 0; i < data.length; i++){ %>
            <%= data[i].name %> : <%= data[i].value %>,
        <% } %>
    ): F[String]
    def create<%= algebraName %>Batch(List[T<%= schemaName %>]): fs2.Stream[F, T<%= schemaName %>]
}

object LiveAccessControl{
    def make[F[_] : Sync](
        xa: Transactor[F]
    ): F[<%=algebraName%>[F]] = 
    Sync[F].delay(
        new Live<%=algebraName%>Service(xa)
    )
}

class Live<%=algebraName%>Service[F[_]: GenUUID: BracketThrow](
    xa: Transactor[F]
) extends <%=algebraName%>[F]{

    def get<%= algebraName %>s(): F[List[T<%= schemaName %>]] = {
        val query :  doobie.ConnectionIO[List[T<%= schemaName %>]] = sql"SELECT * FROM <%= schemaName %>"
    }

    def get<%= algebraName %>ById(id: UUID): F[T<%= schemaName %>] = {
        val query : doobie.ConnectionIO[List[AccessControlEntry]] = sql"""
           SELECT * FROM <%= schemaName %>
           WHERE id = (${id}):uuid
        """
            .query[T<%= schemaName %>]
            .to[List]

        query.transact(xa)
    }

    def create<%= algebraName %>(
        <% for(var i = 0; i < data.length; i++){ %>
            <%= data[i].name %> : <%= data[i].value %>,
        <% } %>
    ): F[String] = {
        GenUUID[F].make[UUID].flatMap{id => 
            val query : ConnectionIO[String]  = sql"""
                    INSERT INTO <%= schemaName %> (<%= data.map(e => e.name).join(', ') %>) VALUES
                    ((${id.toString})::uuid, 
                      <% for(var i = 0; i < data.fields.length; i++){ %>
                        <% if(data[i].value == "UUID"){ %>
                           (${ <%= data[i].name %>} )::uuid
                        <% }else{ %>
                        <% } %>
                      <% } %> 
                    )
            """
                .update
                .withUniqueGeneratedKeys("id")
            query.transact(xa)
        }
    }

    type IdAccessPair = (UUID, Access)

    def createAccessLevelBatchNonStream(entity: UserId, band: BandId, accessLevel: AccessLevelType, access: List[Access]) : F[Int] = {
        GenUUID[F].makeMany[AccessControlID](access.length).flatMap{(ids : List[AccessControlID]) => 
            val zipped = ids.map(_.value).zip(access)
            val query = s"""
               INSERT INTO accesscontrol (id, band_id, access_level, access) values (?, ('${band.value}')::uuid, '${accessLevel}' , ?)
            """
            Update[IdAccessPair](query).updateMany(zipped).transact(xa)
        }
    }

   def createAccessLevelBatch(entity: UserId, band: BandId, accessLevel: AccessLevelType, access: List[Access], n: Int) : fs2.Stream[F, AccessControlEntry] = {
       val query = s"""
               INSERT INTO accesscontrol (band_id, access_level, access) values ((${band.value.toString})::uuid, ${accessLevel}, ?)
        """

       Update[Access](query)
        .updateManyWithGeneratedKeys[AccessControlEntry]("id", "band_id", "access_level", "access")(access)
        .take(n)
        //.compile.toList
        .transact(xa)
   }
}